buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.4'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'org.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }  // Spring AI Milestone
}

// Spring AI BOM (필수!)
dependencyManagement {
    imports {
        mavenBom "org.springframework.ai:spring-ai-bom:1.0.0-M2"
    }
}

dependencies {
    // ===== 핵심 Spring Boot =====
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'  // hibernate-validator 포함
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'




    // ===== API 문서 & AI =====
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'  // 버전 업데이트
    implementation 'org.springframework.ai:spring-ai-openai-spring-boot-starter'

    // ===== AWS S3 =====
    implementation 'io.awspring.cloud:spring-cloud-aws-starter-s3:3.0.1'  // S3만 사용
    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.767'

    // ===== 데이터베이스 =====
    runtimeOnly 'com.h2database:h2' // H2 데이터베이스 추가
    runtimeOnly 'com.mysql:mysql-connector-j'
    // MyBatis
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.3'

    // ===== QueryDSL =====
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // ===== 유틸리티 =====
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    compileOnly 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // ===== Hibernate 확장 =====
    implementation 'com.vladmihalcea:hibernate-types-60:2.21.1'  // JSON 타입 지원

    // ===== Jakarta/Servlet (보통 자동 포함되지만 명시) =====
    implementation 'jakarta.annotation:jakarta.annotation-api'
    compileOnly 'jakarta.servlet:jakarta.servlet-api'

    // ===== URL Rewrite (필요시) =====
    implementation 'org.tuckey:urlrewritefilter:5.1.3'

    // ===== 테스트 =====
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:mysql:1.19.3'  // MySQL TestContainer
    testImplementation 'org.assertj:assertj-core'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // 테스트용 Lombok
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
}

tasks.named('test') {
    useJUnitPlatform()
}

// ===== QueryDSL 설정 =====
def querydslDir = "$buildDir/generated/querydsl"  // 수정: buildDir 사용

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', querydslDir]
        }
    }
}

// QueryDSL Q클래스 생성 위치
tasks.withType(JavaCompile) {
    options.generatedSourceOutputDirectory = file(querydslDir)
}

// clean 시 QueryDSL 디렉토리 삭제
clean {
    delete file(querydslDir)
}

// 빌드 최적화
tasks.named('bootJar') {
    archiveFileName = 'app.jar'
}

// 인코딩 설정
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}